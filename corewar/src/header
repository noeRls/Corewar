
/*	inits.c	*/

void init_progs(args_t *arg, env_t *env);
void ini_prog_memory(env_t *env);
void init(args_t *arg, env_t *env);

/*	main.c	*/

static void magic_reverse(void *x);
int get_unique_id(int const *diff_id, int size);
int get_mem_start(int const *mem_start, int size);
int main(int ac, char **av);

/*	manage_args.c	*/

void finally_setup_arg(args_t *arg);
int handle_for(int *i, int j, args_t *args, char **av);
args_t *second_part(args_t *args, int ac, char **av);
args_t *manage_args(int ac, char **av);

/*	memory_tools.c	*/

void swap(void *data, int size);
void print_hexa_mem(unsigned char *memory);
void write_to_mem(unsigned char *memory, void *data, int size, int start);
void read_from_mem(unsigned char *memory, void *data, int size, int start);

/*	op.c	*/

op_t op_tab[] =;

/*	prog_tools.c	*/

void add_prog(program_t **start, program_t *to_add);
program_t *prog_dup(program_t *prog);
program_t *start_prog(char *path);

/*	run.c	*/

int end(program_t *list);
void destroy_prog(env_t *env, program_t **list, program_t *p);
void manage_cycle(env_t *env);
void execute_prog(env_t *env, program_t *p);

/*	opcode/add.c	*/

void add(env_t *env, program_t *p, instr_t info);

/*	opcode/aff.c	*/

void aff(env_t *env, program_t *p, instr_t info);

/*	opcode/and.c	*/

static void setup(env_t *env, program_t *p, instr_t info, int *arg);
void and(env_t *env, program_t *p, instr_t info);

/*	opcode/arg_data.c	*/

type_arg_t get_arg_type(char desc, int arg_nbr);
int get_size_type(type_arg_t type, int is_special);
int get_arg_data(env_t *env, program_t *p, type_arg_t type);

/*	opcode/fork.c	*/

void fork_op(env_t *env, program_t *p, instr_t info);

/*	opcode/ld.c	*/

void ld(env_t *env, program_t *p, instr_t info);

/*	opcode/ldi.c	*/

static int setup(env_t *env, instr_t info, int *arg);
void ldi(env_t *env, program_t *p, instr_t info);

/*	opcode/lfork.c	*/

void lfork(env_t *env, program_t *p, instr_t info);

/*	opcode/live.c	*/

void live(env_t *env, program_t *p, instr_t info);

/*	opcode/lld.c	*/

void lld(env_t *env, program_t *p, instr_t info);

/*	opcode/lldi.c	*/

static int setup(env_t *env, instr_t info, int *arg);
void lldi(env_t *env, program_t *p, instr_t info);

/*	opcode/or.c	*/

static void setup(env_t *env, program_t *p, instr_t info, int *arg);
void or(env_t *env, program_t *p, instr_t info);

/*	opcode/pc_tools.c	*/

void set_pc(program_t *p, int value);
int up_pc(program_t *p, int size);

/*	opcode/st.c	*/

void st(env_t *env, program_t *p, instr_t info);

/*	opcode/sti.c	*/

void sti(env_t *env, program_t *p, instr_t info);

/*	opcode/sub.c	*/

void sub(env_t *env, program_t *p, instr_t info);

/*	opcode/tool_op.c	*/

int is_special_size(char code);
void set_cycle(program_t *p, char code);
int do_idx_mod(int value, program_t *p);
void manage_idx_mod(int *value, program_t *p, int idx_mod_ind);
int setup_arg(int *arg, program_t *p, env_t *env, int idx_mod_ind);

/*	opcode/xor.c	*/

static void setup(env_t *env, program_t *p, instr_t info, int *arg);
void xor(env_t *env, program_t *p, instr_t info);

/*	opcode/zjmp.c	*/

void zjmp(env_t *env, program_t *p, instr_t info);
